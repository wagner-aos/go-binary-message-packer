package messagepacker

import (
	"testing"

	"github.com/smartystreets/goconvey/convey"
	. "github.com/smartystreets/goconvey/convey"
)

func TestHeader(t *testing.T) {

	Convey("Given a message header, should be converted to...", t, func() {

		Convey("hex to str", func() {

			bytes := "0249"

			hexStr, err := ConvertMessageHeaderHexToDecimalString(bytes)
			convey.Printf("\nhexHeader %s", bytes)
			convey.Printf("\nhexStr %s\n", hexStr)

			So(hexStr, ShouldEqual, "0585")
			So(err, ShouldBeNil)
		})

		Convey("hex to int", func() {

			bytes := "0249"

			hexInt, err := ConvertMessageHeaderHexToInt(bytes)
			convey.Printf("\nhexHeader %s", bytes)
			convey.Printf("\nhexInt %d\n", hexInt)

			So(hexInt, ShouldEqual, 585)
			So(err, ShouldBeNil)
		})

		Convey("str to hex", func() {

			bytes := "0249"

			hexDecimalStr, err := ConvertMessageHeaderHexToDecimalString(bytes)
			convey.Printf("\nhexHeader %s", bytes)
			convey.Printf("\nhexDecimalStr %s\n", hexDecimalStr)

			So(hexDecimalStr, ShouldEqual, "0585")
			So(err, ShouldBeNil)
		})

	})
}

func TestConverter(t *testing.T) {

	Convey("Given a message, should be converted to...", t, func() {

		Convey("bytes to hex", func() {

			// bytes := "0200f23c670108e19a4000000000000000021663629700004570131830000000000008810408203008000001203008040825087100076059111100110000000000100000000000112345678123456789123456Amazon Shop            SAO PAULO     076021*CNP014000000000000009681111111100030010000000002559F260854BD15AE210A51179F2701809F10120210A50002020000000000000000000000FF9F3704B576D1139F360200F6950542000080009A031903229C01009F02060000000258009F03060000000000005F2A020986820258009F1A0200769F3501229F34034103025F24032205319F3303E0F0C85F280200768407A000000059Av Rio Negro, 500     23456-89007645678Shopping Iguatemi   00500001"

			// hexStr, size := ConvertMessageStrToHex(bytes)
			// convey.Printf("\nhexStr %x", hexStr)
			// convey.Printf("\nsize %d\n", size)

			// expected := "024930323030663233633637303130386531396134303030303030303030303030303030303231363633363239373030303034353730313331383330303030303030303030303038383130343038323033303038303030303031323033303038303430383235303837313030303736303539313131313030313130303030303030303030313030303030303030303030313132333435363738313233343536373839313233343536416d617a6f6e2053686f7020202020202020202020202053414f205041554c4f20202020203037363032312a434ef204e6567726f2c20353030202020202032333435362d383930303736343536373853686f7070696e67204967756174656d692020203030353030303031"

			// So(hexStr, ShouldEqual, expected)
			// So(size, ShouldEqual, 585)
		})

	})
}
