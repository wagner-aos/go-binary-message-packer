package messagepacker

import (
	"testing"

	"github.com/smartystreets/goconvey/convey"
	. "github.com/smartystreets/goconvey/convey"
)

func TestMessagePacker(t *testing.T) {

	Convey("Given a message packer...", t, func() {

		packer := &MessagePack{}
		packer.NewMessagePack("Mastercard Interface Processor", 4, "hex", "decimal", "hex", "ascii")

		convey.Printf("\nMessage Packer %v", packer)

		header := []byte("0251")
		payload := []byte("303230306632336336373031306565313961343030303030303030303030303030303032313634353334353637383132333435363738303032303030303030303030303030383831303430383230333030383030303030313230333030383034303832353038373130303037363035393131313130303131303030303030303030303130303030303030303030303030314f4b383830303132333435363738313233343536373839313233343536416d617a6f6e2053686f7020202020202020202020202053414f205041554c4f20202020203037363032312a434ef204e6567726f2c20353030202020202032333435362d383930303736343536373853686f7070696e67204967756174656d692020203030353030303031")

		Convey("should be HEADER converted from hex to decimal", func() {

			headerConverted, err := packer.ConvertMessageHeader(header)
			convey.Printf("\n* hexHeader %s", header)
			convey.Printf("\n* decimalHeader %s\n", headerConverted)

			So(string(headerConverted), ShouldEqual, "0593")
			So(err, ShouldBeNil)

		})

		Convey("should be PAYLOAD converted from hex to ascii", func() {

			payloadConverted, err := packer.ConvertMessagePayload(payload)
			convey.Printf("\n* hexPayload %s\n", payload)
			convey.Printf("\n* asciiPayload %s\n", payloadConverted)

			So(string(payloadConverted), ShouldEqual, "0200f23c67010ee19a4000000000000000021645345678123456780020000000000008810408203008000001203008040825087100076059111100110000000000100000000000001OK880012345678123456789123456Amazon Shop            SAO PAULO     076021*CNP014000000000000009681111111100030010000000002559F260854BD15AE210A51179F2701809F10120210A50002020000000000000000000000FF9F3704B576D1139F360200F6950542000080009A031903229C01009F02060000000258009F03060000000000005F2A020986820258009F1A0200769F3501229F34034103025F24032205319F3303E0F0C85F280200768407A000000059Av Rio Negro, 500     23456-89007645678Shopping Iguatemi   00500001")
			So(err, ShouldBeNil)
		})

	})

	Convey("Given a ANOTHER message packer...", t, func() {

		packer := &MessagePack{}
		packer.NewMessagePack("Mastercard Interface Processor", 4, "decimal", "hex", "ascii", "hex")

		convey.Printf("\nMessage Packer %v", packer)

		header := []byte("0593")
		payload := []byte("0200f23c67010ee19a4000000000000000021645345678123456780020000000000008810408203008000001203008040825087100076059111100110000000000100000000000001OK880012345678123456789123456Amazon Shop            SAO PAULO     076021*CNP014000000000000009681111111100030010000000002559F260854BD15AE210A51179F2701809F10120210A50002020000000000000000000000FF9F3704B576D1139F360200F6950542000080009A031903229C01009F02060000000258009F03060000000000005F2A020986820258009F1A0200769F3501229F34034103025F24032205319F3303E0F0C85F280200768407A000000059Av Rio Negro, 500     23456-89007645678Shopping Iguatemi   00500001")

		Convey("should be HEADER converted from decimal to hex", func() {

			headerConverted, err := packer.ConvertMessageHeader(header)
			convey.Printf("\n* decimalHeader %s\n", header)
			convey.Printf("\n* hexHeader %s\n", headerConverted)

			So(string(headerConverted), ShouldEqual, "0251")
			So(err, ShouldBeNil)

		})

		Convey("should be PAYLOAD converted from ascii to hex", func() {

			payloadConverted, err := packer.ConvertMessagePayload(payload)
			convey.Printf("\n* asciiPayload %s\n", payload)
			convey.Printf("\n* hexPayload %s\n", payloadConverted)

			So(string(payloadConverted), ShouldEqual, "303230306632336336373031306565313961343030303030303030303030303030303032313634353334353637383132333435363738303032303030303030303030303030383831303430383230333030383030303030313230333030383034303832353038373130303037363035393131313130303131303030303030303030303130303030303030303030303030314f4b383830303132333435363738313233343536373839313233343536416d617a6f6e2053686f7020202020202020202020202053414f205041554c4f20202020203037363032312a434ef204e6567726f2c20353030202020202032333435362d383930303736343536373853686f7070696e67204967756174656d692020203030353030303031")
			So(err, ShouldBeNil)
		})

		Convey("should be HEADER and PAYLOAD have the same size", func() {

			isValid, err := packer.ValidateMessageSize(header, payload)
			convey.Printf("\n* header %s", header)
			convey.Printf("\n* payload %s\n", payload)
			convey.Printf("\n* Error %v\n", err)

			So(isValid, ShouldBeTrue)
			So(err, ShouldBeNil)
		})

	})

	Convey("Given a ANOTHER message packer for validating SIZES...", t, func() {

		packer := &MessagePack{}
		packer.NewMessagePack("Mastercard Interface Processor", 4, "decimal", "hex", "ascii", "hex")

		convey.Printf("\nMessage Packer %v", packer)

		header := []byte("0593")
		payload := []byte("0200f23c67010ee19a4000000000000000021645345678123456780020000000000008810408203008000001203008040825087100076059111100110000000000100000000000001OK880012345678123456789123456Amazon Shop            SAO PAULO     076021*CNP014000000000000009681111111100030010000000002559F260854BD15AE210A51179F2701809F10120210A50002020000000000000000000000FF9F3704B576D1139F360200F6950542000080009A031903229C01009F02060000000258009F03060000000000005F2A020986820258009F1A0200769F3501229F34034103025F24032205319F3303E0F0C85F280200768407A000000059Av Rio Negro, 500     23456-89007645678Shopping Iguatemi   00500001")

		Convey("should be HEADER and PAYLOAD have the same size", func() {

			isValid, err := packer.ValidateMessageSize(header, payload)
			convey.Printf("\nheader %s", header)
			convey.Printf("\npayload %s\n", payload)
			convey.Printf("\nError %v\n", err)

			So(isValid, ShouldBeTrue)
			So(err, ShouldBeNil)
		})

		Convey("should be HEADER and PAYLOAD have the sizes confirmed", func() {

			decimalHeader, err := packer.GetDecimalHeader(header)
			convey.Printf("\nheader size %d", decimalHeader)

			decimalPayloadSize := packer.GetDecimalPayloadSize(payload)
			convey.Printf("\npayload size %d\n", decimalPayloadSize)

			So(decimalHeader, ShouldEqual, 593)
			So(decimalPayloadSize, ShouldEqual, 593)
			So(err, ShouldBeNil)
		})

	})

}
